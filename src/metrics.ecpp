<#
 #
 # Copyright (C) 2018 - 2020 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file metrics.ecpp
 * \author Gerald Guillaume <GeraldGuillaume@Eaton.com>
 * \brief Implementation of metrics operations
 */
 #><%pre>
#include "src/tntmlm.h"
#include <fty_proto.h>

//out <label>{device="<device-id>"} <value>
static
void s_rt_dump_metrics(const char*label, const char* name, const char*filter,MlmClientPool::Ptr &client,tnt::HttpReply& reply)
{
    static const char* method = "GET";
    zmsg_t *msg = zmsg_new ();
    zuuid_t *uuid = zuuid_new ();
    zmsg_addstr (msg, zuuid_str_canonical (uuid));
    zmsg_addstr (msg, method);
    zmsg_addstr (msg, name);
    if(filter!=NULL)
        zmsg_addstr (msg, filter);

    int rv = client->sendto ("fty-metric-cache", "latest-rt-data", 1000, &msg);
    if (rv == -1) {
        zuuid_destroy (&uuid);
        printf (
                "client->sendto (address = '%s', subject = '%s', timeout = 1000) failed.",
                "fty-metric-cache", "latest-rt-data");
        return ;
    }

    msg = client->recv (zuuid_str_canonical (uuid), 5);
    zuuid_destroy (&uuid);
    if (!msg) {
        printf ("client->recv (timeout = '5') returned NULL");
        return ;
    }

    char *result = zmsg_popstr (msg);
    if (NULL==result || !streq (result, "OK")) {
        printf ("Error reply for device '%s', result=%s", name, (result==NULL)?"NULL":result);
        if(result!=NULL)
            zstr_free (&result);
        zmsg_destroy (&msg);
        return ;
    }
    char *element = zmsg_popstr (msg);
    if (!streq (element, name)) {
        printf ("element name (%s) from message differs from requested one (%s), ignoring", element,name);
        zstr_free (&element);
        zmsg_destroy (&msg);
        return ;
    }
    zstr_free (&element);

    if(msg==NULL)
        return;
    zmsg_t *data = zmsg_popmsg (msg);
    while (data) {
        fty_proto_t *bmsg = fty_proto_decode (&data);
        if (!bmsg) {
            printf ("decoding fty_proto_t failed");
            zmsg_destroy (&msg);
            return;
        }

        // TODO: non double values are not (yet) supported
        double dvalue = 0.0;
        try {
            dvalue = std::stod (fty_proto_value (bmsg));
        } catch (const std::exception& e) {
            printf ("fty_proto_value () returned a string that does not encode a double value: '%s'. Defaulting to 0.0 value.", fty_proto_value (bmsg));
        }
        reply.out() << label;
        reply.out() << "{ device=\"";
        reply.out() << fty_proto_name(bmsg);
        reply.out() << "\"} ";
        reply.out() << dvalue;
        reply.out() << "\n";
        fty_proto_destroy (&bmsg);
        data = zmsg_popmsg (msg);
    }
    zmsg_destroy (&msg);
}
</%pre>
<%cpp>
    // connect to malamute
    MlmClientPool::Ptr client = mlm_pool.get ();
    if (!client.getPointer ()) {
        printf ("mlm_pool.get () failed.");
        return HTTP_INTERNAL_SERVER_ERROR;
    }
</%cpp>
# HELP ipm_realpower_watt current realpower
# TYPE ipm_realpower_watt gauge
<%cpp>
   s_rt_dump_metrics("ipm_realpower_watt",".*","realpower.default$",client,reply);
</%cpp>
# HELP ipm_temperature_celsius current ambient temperature
# TYPE ipm_temperature_celsius gauge
<%cpp>
   s_rt_dump_metrics("ipm_temperature_celsius",".*","average.temperature$|average.temperature-input$|temperature.cpu$",client,reply);
</%cpp>
# HELP ipm_humidity_percent current ambient temperature
# TYPE ipm_humidity_percent gauge
<%cpp>
   s_rt_dump_metrics("ipm_humidity_percent",".*","average.humidity$|average.humidity-input$",client,reply);
</%cpp>

